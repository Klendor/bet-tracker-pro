# Chrome Extension CI/CD Pipeline
name: Chrome Extension CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Validate extension structure and manifest
  validate:
    runs-on: ubuntu-latest
    name: Validate Extension
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate manifest.json
      run: |
        # Check if manifest.json exists and is valid JSON
        if [ ! -f "manifest.json" ]; then
          echo "❌ manifest.json not found"
          exit 1
        fi
        
        # Validate JSON syntax
        if ! jq empty manifest.json; then
          echo "❌ manifest.json is not valid JSON"
          exit 1
        fi
        
        echo "✅ manifest.json is valid"
        
    - name: Check required files
      run: |
        missing_files=0
        
        # Required extension files
        required_files=(
          "background/background.js"
          "popup/popup.html"
          "popup/popup.js"
          "popup/popup.css"
          "content/content.js"
          "icons/icon-16.png"
          "icons/icon-48.png"
          "icons/icon-128.png"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file"
          else
            echo "❌ $file - MISSING"
            ((missing_files++))
          fi
        done
        
        if [ $missing_files -gt 0 ]; then
          echo "❌ Found $missing_files missing files"
          exit 1
        fi
        
        echo "✅ All required files present"
        
    - name: Validate API structure
      run: |
        # Check serverless API structure
        if [ ! -d "api" ]; then
          echo "❌ API directory not found"
          exit 1
        fi
        
        # Required API files
        api_files=(
          "api/health.js"
          "api/process-bet.js"
          "api/history.js"
          "api/user/info.js"
          "api/auth/google/index.js"
          "api/auth/google/callback.js"
        )
        
        missing_api=0
        for file in "${api_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file"
          else
            echo "❌ $file - MISSING"
            ((missing_api++))
          fi
        done
        
        if [ $missing_api -gt 0 ]; then
          echo "❌ Found $missing_api missing API files"
          exit 1
        fi
        
        echo "✅ All API files present"
        
    - name: Run extension validation script
      run: ./validate-deployment.sh
      
  # Build extension for different environments  
  build:
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        environment: [staging, production]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure environment
      run: |
        if [ "${{ matrix.environment }}" = "staging" ]; then
          echo "VERCEL_URL=https://bet-tracker-pro-api-staging.vercel.app" >> $GITHUB_ENV
          echo "EXTENSION_VERSION_SUFFIX=-dev" >> $GITHUB_ENV
        else
          echo "VERCEL_URL=https://bet-tracker-pro-api.vercel.app" >> $GITHUB_ENV
          echo "EXTENSION_VERSION_SUFFIX=" >> $GITHUB_ENV
        fi
        
    - name: Build extension
      run: |
        # Create build directory
        mkdir -p extension-build/${{ matrix.environment }}
        
        # Copy extension files
        cp -r background/ extension-build/${{ matrix.environment }}/
        cp -r popup/ extension-build/${{ matrix.environment }}/
        cp -r content/ extension-build/${{ matrix.environment }}/
        cp -r icons/ extension-build/${{ matrix.environment }}/
        cp -r config/ extension-build/${{ matrix.environment }}/
        cp auth-success.html extension-build/${{ matrix.environment }}/
        cp welcome.html extension-build/${{ matrix.environment }}/
        cp welcome.js extension-build/${{ matrix.environment }}/
        
        # Update API URL in background script
        sed -i "s|baseUrl: isDev ? 'http://localhost:3000' : '.*'|baseUrl: isDev ? 'http://localhost:3000' : '${{ env.VERCEL_URL }}/api'|g" extension-build/${{ matrix.environment }}/background/background.js
        
        # Update manifest version and API URL
        jq --arg env "${{ matrix.environment }}" --arg suffix "${{ env.EXTENSION_VERSION_SUFFIX }}" '
          .version = (.version + $suffix) |
          .name = (.name + if $env == "staging" then " (Staging)" else "" end)
        ' manifest.json > extension-build/${{ matrix.environment }}/manifest.json
        
        echo "✅ Extension built for ${{ matrix.environment }}"
        
    - name: Create extension package
      run: |
        cd extension-build/${{ matrix.environment }}
        zip -r ../bet-tracker-pro-${{ matrix.environment }}.zip .
        echo "✅ Extension packaged: bet-tracker-pro-${{ matrix.environment }}.zip"
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-${{ matrix.environment }}
        path: extension-build/bet-tracker-pro-${{ matrix.environment }}.zip
        retention-days: 30
        
  # Deploy API to Vercel (production only)
  deploy-api:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        
  # Create GitHub release for production builds
  release:
    runs-on: ubuntu-latest
    needs: [build, deploy-api]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download production build
      uses: actions/download-artifact@v4
      with:
        name: extension-production
        path: ./
        
    - name: Get version from manifest
      id: version
      run: |
        VERSION=$(jq -r '.version' manifest.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Bet Tracker Pro v${{ steps.version.outputs.version }}
        body: |
          ## Chrome Extension Release v${{ steps.version.outputs.version }}
          
          ### 🚀 What's New
          - Automatic deployment from main branch
          - Production-ready serverless backend
          - Enhanced security and performance
          
          ### 📦 Installation
          1. Download `bet-tracker-pro-production.zip`
          2. Extract the files
          3. Load unpacked extension in Chrome
          
          ### 🔗 API Endpoint
          - Production API: https://bet-tracker-pro-api.vercel.app
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.version }}...HEAD
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bet-tracker-pro-production.zip
        asset_name: bet-tracker-pro-production.zip
        asset_content_type: application/zip