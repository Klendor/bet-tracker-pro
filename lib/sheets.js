// Google Sheets utilities for Express.js application
import { google } from 'googleapis';

export const createGoogleSheetsTemplate = async (user) => {
  try {
    console.log('ðŸ“Š Copying Google Sheets template for user:', user.email);
    
    // Template ID from your master template
    const TEMPLATE_ID = '1xsvxK5uYVQRupUarXxF_s44h-j_l7yndWMN0rbZIOck';
    
    const auth = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    
    auth.setCredentials({
      access_token: user.google_access_token,
      refresh_token: user.google_refresh_token
    });
    
    // Set up token refresh handler
    auth.on('tokens', (tokens) => {
      console.log('ðŸ“Š Google tokens refreshed in template copying:', !!tokens.access_token);
    });
    
    const drive = google.drive({ version: 'v3', auth });
    
    // Copy the template to user's Drive
    console.log('ðŸ“Š Copying template ID:', TEMPLATE_ID);
    const copyRequest = {
      fileId: TEMPLATE_ID,
      requestBody: {
        name: `Bet Tracker Pro - ${user.name || user.email}`,
        parents: [] // Will be placed in user's root Drive folder
      }
    };
    
    const copiedFile = await drive.files.copy(copyRequest);
    const spreadsheetId = copiedFile.data.id;
    
    console.log('ðŸ“Š Template copied successfully. New spreadsheet ID:', spreadsheetId);
    
    // Optional: Give the user explicit permissions (they should already have access as owner)
    try {
      await drive.permissions.create({
        fileId: spreadsheetId,
        requestBody: {
          role: 'writer',
          type: 'user',
          emailAddress: user.email
        },
        sendNotificationEmail: false
      });
      console.log('ðŸ“Š Permissions set for user:', user.email);
    } catch (permError) {
      // This might fail if user already has access, which is fine
      console.log('ðŸ“Š Permission setting skipped (user likely already has access):', permError.message);
    }
    
    const spreadsheetUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit`;
    
    return {
      success: true,
      spreadsheetId,
      spreadsheetUrl,
      message: 'Bet tracking template copied successfully'
    };
    
  } catch (error) {
    console.error('Google Sheets template copying error:', error);
    
    // Provide more specific error messages
    let errorMessage = 'Failed to copy spreadsheet template';
    
    if (error.code === 404) {
      errorMessage = 'Template not found. Please check the template ID.';
    } else if (error.code === 403) {
      errorMessage = 'Permission denied. The template may not be publicly accessible.';
    } else if (error.code === 401) {
      errorMessage = 'Authentication failed. Please reconnect your Google account.';
    }
    
    return {
      success: false,
      error: errorMessage,
      details: error.message
    };
  }
};

export const syncBetToSheets = async (user, betData) => {
  try {
    // Validate required data
    if (!user.spreadsheet_id) {
      throw new Error('No spreadsheet connected. Please set up Google Sheets integration first.');
    }
    
    if (!user.google_access_token || !user.google_refresh_token) {
      throw new Error('Google authentication required. Please reconnect your Google account.');
    }
    
    console.log('ðŸ“Š Starting Google Sheets sync for user:', user.email);
    console.log('ðŸ“Š Spreadsheet ID:', user.spreadsheet_id);
    console.log('ðŸ“Š Bet data to sync:', betData);
    
    const auth = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );
    
    auth.setCredentials({
      access_token: user.google_access_token,
      refresh_token: user.google_refresh_token
    });
    
    // Set up token refresh handler
    auth.on('tokens', (tokens) => {
      console.log('ðŸ“Š Google tokens refreshed:', !!tokens.access_token);
      // Note: In a real implementation, you'd update the database with new tokens
    });
    
    const sheets = google.sheets({ version: 'v4', auth });
    
    // Prepare bet data for sheets matching the new template structure
    // Columns: ID, Status, Match DateTime, Sport, Teams/Event, Market, Selection, 
    // Odds, Stake, Potential Return, Return, P/L, Bookmaker, Type, Added, Days Pending, Delete,
    // Bet URL, Original Data, Last Modified, Duplicate Check
    
    const now = new Date();
    const matchDateTime = betData.match_datetime || betData.date || now.toLocaleString();
    
    const rowData = [
      '', // ID (auto-generated by formula)
      betData.status?.toUpperCase() || 'PENDING', // Status
      matchDateTime, // Match DateTime
      betData.sport || '', // Sport
      betData.teams || betData.event || '', // Teams/Event
      betData.market || betData.bet_type || 'Other', // Market
      betData.selection || '', // Selection
      betData.odds || '', // Odds
      betData.stake || '', // Stake
      '', // Potential Return (calculated by formula)
      betData.actual_return || '', // Return (for cash outs)
      '', // P/L (calculated by formula)
      betData.bookmaker || '', // Bookmaker
      betData.is_live ? 'LIVE' : 'PRE-MATCH', // Type
      now.toLocaleString(), // Added
      '', // Days Pending (calculated by formula)
      false, // Delete
      betData.bet_url || '', // Bet URL
      JSON.stringify(betData), // Original Data
      now.toLocaleString(), // Last Modified
      '' // Duplicate Check (calculated by formula)
    ];
    
    console.log('ðŸ“Š Prepared row data for sheets:', rowData);
    
    // Append to Bet Tracker sheet (main sheet name in your template)
    console.log('ðŸ“Š Attempting to append data to spreadsheet...');
    const appendResult = await sheets.spreadsheets.values.append({
      spreadsheetId: user.spreadsheet_id,
      range: 'Bet Tracker!A:U', // Updated to match all 21 columns
      valueInputOption: 'USER_ENTERED',
      insertDataOption: 'INSERT_ROWS',
      resource: { values: [rowData] }
    });
    
    console.log('ðŸ“Š Google Sheets append successful:', appendResult.data);
    
    return {
      success: true,
      message: 'Bet synced to Google Sheets successfully',
      appendedRange: appendResult.data.updates?.updatedRange
    };
    
  } catch (error) {
    console.error('ðŸš« Google Sheets sync error details:', {
      message: error.message,
      code: error.code,
      status: error.status,
      statusText: error.statusText,
      response: error.response?.data
    });
    
    // Provide specific error messages based on error type
    let userFriendlyError = 'Failed to sync bet to sheets';
    
    if (error.code === 401 || error.message.includes('unauthorized') || error.message.includes('invalid_grant')) {
      userFriendlyError = 'Google authentication expired. Please reconnect your Google account.';
    } else if (error.code === 403) {
      userFriendlyError = 'Permission denied. Please check spreadsheet sharing settings.';
    } else if (error.code === 404) {
      userFriendlyError = 'Spreadsheet not found. It may have been deleted or moved.';
    } else if (error.message.includes('spreadsheet_id')) {
      userFriendlyError = 'Invalid spreadsheet configuration. Please reconnect Google Sheets.';
    }
    
    return {
      success: false,
      error: userFriendlyError,
      details: error.message
    };
  }
};